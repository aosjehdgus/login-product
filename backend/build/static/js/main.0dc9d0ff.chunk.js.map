{"version":3,"sources":["stores/UserStore.js","Head.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","Head","className","props","title","React","Component","InputField","label","type","placeholder","value","onChange","e","target","SubmitButton","disabled","onClick","text","LoginForm","state","head","password","buttonDisabled","property","val","trim","length","setState","a","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","diabled","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc9d0ff.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/* User Store */\r\n\r\nclass UserStore{\r\n\r\n    constructor(){\r\n// store에 대한 속성 포함 \r\n        extendObservable(this, {\r\n// login 양식이 로드 되는지 여부 확인하기 위해 loading 추가\r\n            loading : true,\r\n// boolean(논리) 연산자를 통해서 login 여부 확인\r\n            isLoggedIn : false,\r\n// username의 초기 상태는 비어있는 문자열로 지정 \r\n            username : ''\r\n            \r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();\r\n\r\n/* 위의 데이터들을 포함하는 new 인스턴스 사용 */\r\n\r\n    ","import React from 'react';\r\n\r\nclass Head extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"head\">\r\n          \r\n        <h1>\r\n          {this.props.title}\r\n        </h1>    \r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Head;\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"inputField\">\r\n\r\n          <label\r\n            className = 'input_label'>\r\n              {this.props.label}\r\n          </label>\r\n          \r\n          <input\r\n              className = 'input'\r\n              type = {this.props.type}\r\n              placeholder ={this.props.placeholder}\r\n              value ={this.props.value}\r\n              onChange = { (e) => this.props.onChange(e.target.value)}   \r\n          />\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"submitButton\">\r\n          <button\r\n            className = \"btn\"\r\n            disabled = {this.props.disabled}\r\n            onClick = { () => this.props.onClick() }\r\n          >\r\n            {this.props.text}\r\n\r\n          </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SubmitButton;\r\n","import React          from 'react';\r\nimport Head           from './Head';\r\nimport InputField     from './InputField';\r\nimport SubmitButton   from './SubmitButton';\r\nimport UserStore      from './stores/UserStore';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n      head : {title : \"dongle's page\"},\r\n      username : '',\r\n      password : '',\r\n      buttonDisabled : false\r\n    }\r\n\r\n  }\r\n\r\n  setInputValue(property, val){\r\n    val = val.trim(); // 공백이 필요하지 않기 때문에\r\n\r\n  // 프론트 엔드의 유효성 검사의 한종류\r\n    if (val.length > 12){\r\n        return;\r\n    }\r\n    // 상태를 설정하게 되면 state가 property가 된다.\r\n    this.setState({\r\n      [property]: val\r\n\r\n    })\r\n\r\n  }\r\n\r\n  // 메소드 재설정 양식\r\n  // 사용자 이름, 암호를 재설정하고 비활성화된 버튼을 false로 재설정\r\n  // 사용자가 잘못된 이름,비밀번호를 입력하면 양식이 재설정 된다.\r\n  // 사용자가 알맞게 입력하면 새 api 호출을 생성한다.\r\n\r\n  resetForm(){\r\n    this.setState({\r\n      \r\n      username : '',\r\n      password : '',\r\n      buttonDisabled : false\r\n    })\r\n\r\n  }\r\n\r\n  async doLogin() {\r\n\r\n    if (!this.state.username){\r\n      return;\r\n    }\r\n\r\n    if (!this.state.password){\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      buttonDisabled: true\r\n    })\r\n\r\n    try{\r\n      let res = await fetch('/login',{\r\n        method : 'post',\r\n        headers : {\r\n          'Accept' : 'application/json',\r\n          'Content-Type' : 'application/json'\r\n        },\r\n\r\n        body : JSON.stringify({\r\n          username : this.state.username,\r\n          password : this.state.password\r\n\r\n        })\r\n\r\n      });\r\n\r\n      let result = await res.json();\r\n      if (result && result.success){\r\n\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n        \r\n      }\r\n\r\n      else if (result && result.success === false){\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n\r\n    }\r\n\r\n    catch(e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"loginForm\">\r\n          <Head \r\n            title={this.state.head.title}\r\n          \r\n          />\r\n\r\n       \r\n\r\n          <InputField \r\n\r\n              label = '아이디'\r\n              type = 'text'\r\n              placeholder = 'ID'\r\n              value = {this.state.username ? this.state.username : ''}\r\n              onChange = { (val) => this.setInputValue('username', val) }\r\n          />\r\n\r\n          <InputField \r\n\r\n              label = '비밀번호'\r\n              type = 'password'\r\n              placeholder = 'Password'\r\n              value = {this.state.password ? this.state.password : ''}\r\n              onChange = { (val) => this.setInputValue('password', val) }\r\n          />\r\n          <SubmitButton \r\n              text = '회원 가입'\r\n              disabled = {this.state.buttonDisabled}\r\n              onClick = { () => this.doLogin() }\r\n          \r\n          />\r\n\r\n          <SubmitButton \r\n              text = '로그인'\r\n              disabled = {this.state.buttonDisabled}\r\n              onClick = { () => this.doLogin() }\r\n          \r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore';\nimport LoginForm from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount(){\n\n    try{\n\n      let res = await fetch('/isLoggedIn',{\n\n        method : 'post',\n        headers:{\n// JSON과 이에 대한 콘텐츠 유형만 허용\n          'Accept' : 'application/json',\n          'Content-Type' : 'application/json'\n\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;  \n      }\n      else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n\n      }\n    }\n// loading이 되면 app component가 mount된다.\n// 사용자가 세션을 확인하여 로그인했는지 여부를 확인하고,\n\n\n    catch(e){\n\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n\n    }\n\n  }\n\n  async doLogout(){\n\n    try{\n\n      let res = await fetch('/logout',{\n\n        method : 'post',\n        headers:{\n// JSON과 이에 대한 콘텐츠 유형만 허용\n          'Accept' : 'application/json',\n          'Content-Type' : 'application/json'\n\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n\n    catch(e){\n\n      console.log(e)\n\n    }\n\n  }\n\n  render(){\n\n    if (UserStore.loading){\n      return(\n\n        <div className=\"app\">\n           <div className='container'>\n              Loading, Pleae wait..\n\n           </div>\n        </div>\n\n\n      );\n\n    }\n    \n    else{\n\n        if (UserStore.isLoggedIn){\n\n          return(\n\n            <div className=\"app\">\n               <div className='container'>\n                  Welcome {UserStore.username}\n                  <SubmitButton \n                  \n                    text = {'로그아웃'}\n                    diabled = {false}\n                    onClick = { () => this.doLogout()}\n                  \n                  />               \n\n               </div>\n            </div>\n    \n    \n          );\n\n        }\n\n        return (\n          <div className=\"app\">\n              <div className='container'>\n\n                  \n                  <LoginForm />\n               </div>\n          </div>\n        );\n\n    \n    }\n  }\n}\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}